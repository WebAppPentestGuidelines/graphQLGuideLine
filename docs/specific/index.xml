<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GraphQLで起こりやすい問題 on GraphQL診断ガイドライン</title><link>https://wg1.isog-j.org/graphQLGuideLine/docs/specific/</link><description>Recent content in GraphQLで起こりやすい問題 on GraphQL診断ガイドライン</description><generator>Hugo</generator><language>ja</language><atom:link href="https://wg1.isog-j.org/graphQLGuideLine/docs/specific/index.xml" rel="self" type="application/rss+xml"/><item><title>Introspection Query</title><link>https://wg1.isog-j.org/graphQLGuideLine/docs/specific/introspection_query/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wg1.isog-j.org/graphQLGuideLine/docs/specific/introspection_query/</guid><description>&lt;h1 id="introspection-query">
 Introspection Query
 &lt;a class="anchor" href="#introspection-query">#&lt;/a>
&lt;/h1>
&lt;h2 id="概要">
 概要
 &lt;a class="anchor" href="#%e6%a6%82%e8%a6%81">#&lt;/a>
&lt;/h2>
&lt;p>Introspectionとは、GraphQLがどのようなスキーマ情報をサポートしているのかを問い合わせるための機能です。主にAPIのリファレンス代わりとして使われており、詳細なドキュメントがなくとも呼び出し方や戻り値、引数等を把握できます。&lt;br>
GraphQLの多くの実装では、デフォルトでIntrospectionが有効になっており、認証を必要とせずに本機能を利用できます。&lt;/p>
&lt;h2 id="影響">
 影響
 &lt;a class="anchor" href="#%e5%bd%b1%e9%9f%bf">#&lt;/a>
&lt;/h2>
&lt;p>攻撃者にこの機能を悪用されると、対象のGraphQLに関する情報を取得され、ほかの脆弱性への攻撃につながってしまう可能性があります。&lt;/p>
&lt;h3 id="実際に報告された事例">
 実際に報告された事例
 &lt;a class="anchor" href="#%e5%ae%9f%e9%9a%9b%e3%81%ab%e5%a0%b1%e5%91%8a%e3%81%95%e3%82%8c%e3%81%9f%e4%ba%8b%e4%be%8b">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://hackerone.com/reports/291531">https://hackerone.com/reports/291531&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hackerone.com/reports/969456">https://hackerone.com/reports/969456&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hackerone.com/reports/862835">https://hackerone.com/reports/862835&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="検証方法">
 検証方法
 &lt;a class="anchor" href="#%e6%a4%9c%e8%a8%bc%e6%96%b9%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;p>以下のようなクエリをエンドポイントに送信します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-graphql" data-lang="graphql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">query&lt;/span> &lt;span style="color:#a6e22e">IntrospectionQuery&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>__schema {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">type&lt;/span>&lt;span style="color:#a6e22e">s&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-graphql" data-lang="graphql">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;data&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;__schema&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;types&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Query&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;String&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ID&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#66d9ef">...&lt;/span>&lt;span style="color:#a6e22e">中略&lt;/span>&lt;span style="color:#66d9ef">...&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;__DirectiveLocation&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上記クエリを送信し、正常にqueryTypeを含むレスポンスが返された場合、Introspection Queryが解釈されている可能性があります。このような情報からGraphQLシステムに存在する型の情報やQuery/Mutationの名前、それらを呼び出すのに必要な引数等の情報が取得できます。&lt;/p></description></item><item><title>GraphQLによるDoS攻撃</title><link>https://wg1.isog-j.org/graphQLGuideLine/docs/specific/dos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wg1.isog-j.org/graphQLGuideLine/docs/specific/dos/</guid><description>&lt;h1 id="graphqlによるdos攻撃">
 GraphQLによるDoS攻撃
 &lt;a class="anchor" href="#graphql%e3%81%ab%e3%82%88%e3%82%8bdos%e6%94%bb%e6%92%83">#&lt;/a>
&lt;/h1>
&lt;h2 id="概要">
 概要
 &lt;a class="anchor" href="#%e6%a6%82%e8%a6%81">#&lt;/a>
&lt;/h2>
&lt;p>GraphQLはデータ構造に対するクエリ言語であるため、複数のフィールドを組み合わせて巨大なノードを要求するクエリを発行できます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-graphql" data-lang="graphql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">query&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">regions&lt;/span> (limit: &lt;span style="color:#a6e22e">1000&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		teams (limit: &lt;span style="color:#a6e22e">1000&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			users (limit: &lt;span style="color:#a6e22e">1000&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>要求クエリの条件を満たすデータが十分に存在している場合、取得ノード数が指数関数的に増加します。&lt;/p>
&lt;p>また、しばしば再帰的にデータ構造が参照可能な状態になることがあります。&lt;/p>
&lt;p>member コンポーネントは、その所属するチーム情報(team)を取得できます。さらに、teamコンポーネントは、そのチームに所属するメンバーリストを持っています。メンバーリストには最初に指定したメンバー情報を参照できるため、コンポーネントの解決にループが生じます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-graphql" data-lang="graphql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">query&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">member&lt;/span> (id: &lt;span style="color:#a6e22e">1&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		name,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		team {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			teamId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			teamName,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			memberList {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">...&lt;/span>member
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-graphql" data-lang="graphql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">query&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">member&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">...&lt;/span>memberFragment
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fragment&lt;/span> &lt;span style="color:#a6e22e">memberFragment&lt;/span> &lt;span style="color:#66d9ef">on&lt;/span> Member {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	teamFragment
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fragment&lt;/span> &lt;span style="color:#a6e22e">teamFragment&lt;/span> &lt;span style="color:#66d9ef">on&lt;/span> Member {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	team {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		teamId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		teamName,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		memberList {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">...&lt;/span>memberFragment
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>実際に報告された事例は少ないですが、再帰的な解決を引き起こすクエリは潜在的に脆弱になりうる要素の1つとして指摘されています。&lt;/p></description></item><item><title>レースコンディション</title><link>https://wg1.isog-j.org/graphQLGuideLine/docs/specific/race_condition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wg1.isog-j.org/graphQLGuideLine/docs/specific/race_condition/</guid><description>&lt;h1 id="レースコンディション">
 レースコンディション
 &lt;a class="anchor" href="#%e3%83%ac%e3%83%bc%e3%82%b9%e3%82%b3%e3%83%b3%e3%83%87%e3%82%a3%e3%82%b7%e3%83%a7%e3%83%b3">#&lt;/a>
&lt;/h1>
&lt;h2 id="概要">
 概要
 &lt;a class="anchor" href="#%e6%a6%82%e8%a6%81">#&lt;/a>
&lt;/h2>
&lt;p>レースコンディションとは、複数のプロセスやスレッドから同一のリソースへ同時にアクセスした際に、予期せぬ処理結果が生じる問題です。&lt;/p>
&lt;center>
&lt;figure>&lt;img src="figure2.png"
 alt="図2" width="60%">&lt;figcaption>
 &lt;p>図2&lt;/p>
 &lt;/figcaption>
&lt;/figure>

&lt;/center>
&lt;p>たとえば、データベースにおいてトランザクションがレコードを読み取り、値を更新する処理を考えます。あるトランザクションの更新処理が終わる前に、別のトランザクションが同じレコードを読み取り、値を更新した場合、最終的なレコードの値が想定とは異なる状態に更新されてしまう可能性があります。&lt;/p>
&lt;p>GraphQLにおいても、対策をしていない場合、QueryやMutationのリクエストを同時に送信された場合等に、レースコンディションの問題につながる危険性があります。&lt;/p>
&lt;p>GraphQLにおいては、仕様上1つのリクエスト中で複数のMutationを発行した場合は順序が保証されています。しかし、複数のリクエストを同時に送信した場合の順序は保証されていないため、サーバ側の実装次第ではレースコンディションの影響を受ける危険性があります。&lt;/p>
&lt;h2 id="影響">
 影響
 &lt;a class="anchor" href="#%e5%bd%b1%e9%9f%bf">#&lt;/a>
&lt;/h2>
&lt;p>通常のレースコンディションと同様に、予期せぬ処理結果が生じます。たとえば下記のようなものが想定されます。&lt;/p>
&lt;ul>
&lt;li>データの不整合が発生する&lt;/li>
&lt;li>アクセス制限が回避される&lt;/li>
&lt;/ul>
&lt;p>実際に、以下のような事例が報告されています。&lt;/p>
&lt;p>&lt;a href="https://hackerone.com/reports/488985">https://hackerone.com/reports/488985&lt;/a>&lt;/p>
&lt;p>テスト用アカウントのクレデンシャルを取得するmutaitionリクエストを複数送信することにより、本来取得できないはずのアカウントのクレデンシャルを取得可能であった。&lt;/p>
&lt;h2 id="検証方法">
 検証方法
 &lt;a class="anchor" href="#%e6%a4%9c%e8%a8%bc%e6%96%b9%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;p>設計上、競合状態が発生した際の影響が考えられる箇所において、QueryやMutationリクエストをミリ秒単位で同時に複数送信した場合に、処理結果に不整合が発生しないか確認をします。具体的な方法としては、BurpSuiteのIntruderのようなローカルプロキシツールの機能の利用が挙げられます。&lt;/p>
&lt;p>また、ホワイトボックステストも有効です。データベースやファイル等の共有資源へアクセスする処理では問題が起きやすいため、排他制御が適切に行われているか重点的に確認しましょう。&lt;/p>
&lt;h2 id="対策">
 対策
 &lt;a class="anchor" href="#%e5%af%be%e7%ad%96">#&lt;/a>
&lt;/h2>
&lt;p>複数のプロセスやスレッドから同一リソースへアクセスが必要な場合、リソースのチェックから更新までの一連の処理が完了するまで、ほかのプロセスからアクセスできないように排他制御を実装することが推奨されます。&lt;/p>
&lt;p>しかしながら、排他制御の実装によっては、サイトのパフォーマンスにも影響を及ぼす可能性があるため、レースコンディション対策ではより一層注意してください。&lt;/p></description></item></channel></rss>