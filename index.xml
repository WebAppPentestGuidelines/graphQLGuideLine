<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GraphQL診断ガイドライン</title><link>https://wg1.isog-j.org/graphQLGuideline/</link><description>Recent content on GraphQL診断ガイドライン</description><generator>Hugo</generator><language>ja</language><atom:link href="https://wg1.isog-j.org/graphQLGuideline/index.xml" rel="self" type="application/rss+xml"/><item><title>Introspection Query</title><link>https://wg1.isog-j.org/graphQLGuideline/docs/specific/introspection_query/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wg1.isog-j.org/graphQLGuideline/docs/specific/introspection_query/</guid><description>&lt;h1 id="introspection-query">
 Introspection Query
 &lt;a class="anchor" href="#introspection-query">#&lt;/a>
&lt;/h1>
&lt;h2 id="概要">
 概要
 &lt;a class="anchor" href="#%e6%a6%82%e8%a6%81">#&lt;/a>
&lt;/h2>
&lt;p>Introspectionとは、GraphQLがどのようなスキーマ情報をサポートしているのかを問い合わせるための機能です。主にAPIのリファレンス代わりとして使われており、詳細なドキュメントがなくとも呼び出し方や戻り値、引数等を把握できます。&lt;br>
GraphQLの多くの実装では、デフォルトでIntrospectionが有効になっており、認証を必要とせずに本機能を利用できます。&lt;/p>
&lt;h2 id="影響">
 影響
 &lt;a class="anchor" href="#%e5%bd%b1%e9%9f%bf">#&lt;/a>
&lt;/h2>
&lt;p>攻撃者にこの機能を悪用されると、対象のGraphQLに関する情報を取得され、ほかの脆弱性への攻撃につながってしまう可能性があります。&lt;/p>
&lt;h3 id="実際に報告された事例">
 実際に報告された事例
 &lt;a class="anchor" href="#%e5%ae%9f%e9%9a%9b%e3%81%ab%e5%a0%b1%e5%91%8a%e3%81%95%e3%82%8c%e3%81%9f%e4%ba%8b%e4%be%8b">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://hackerone.com/reports/291531">https://hackerone.com/reports/291531&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hackerone.com/reports/969456">https://hackerone.com/reports/969456&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hackerone.com/reports/862835">https://hackerone.com/reports/862835&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="検証方法">
 検証方法
 &lt;a class="anchor" href="#%e6%a4%9c%e8%a8%bc%e6%96%b9%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;p>以下のようなクエリをエンドポイントに送信します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-graphql" data-lang="graphql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">query&lt;/span> &lt;span style="color:#a6e22e">IntrospectionQuery&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>__schema {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">type&lt;/span>&lt;span style="color:#a6e22e">s&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-graphql" data-lang="graphql">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;data&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;__schema&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;types&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Query&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;String&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ID&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#66d9ef">...&lt;/span>&lt;span style="color:#a6e22e">中略&lt;/span>&lt;span style="color:#66d9ef">...&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;__DirectiveLocation&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上記クエリを送信し、正常にqueryTypeを含むレスポンスが返された場合、Introspection Queryが解釈されている可能性があります。このような情報からGraphQLシステムに存在する型の情報やQuery/Mutationの名前、それらを呼び出すのに必要な引数等の情報が取得できます。&lt;/p></description></item><item><title>インジェクション系の脆弱性について</title><link>https://wg1.isog-j.org/graphQLGuideline/docs/common/injection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wg1.isog-j.org/graphQLGuideline/docs/common/injection/</guid><description>&lt;h1 id="インジェクション系の脆弱性について">
 インジェクション系の脆弱性について
 &lt;a class="anchor" href="#%e3%82%a4%e3%83%b3%e3%82%b8%e3%82%a7%e3%82%af%e3%82%b7%e3%83%a7%e3%83%b3%e7%b3%bb%e3%81%ae%e8%84%86%e5%bc%b1%e6%80%a7%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6">#&lt;/a>
&lt;/h1>
&lt;h2 id="概要">
 概要
 &lt;a class="anchor" href="#%e6%a6%82%e8%a6%81">#&lt;/a>
&lt;/h2>
&lt;p>GraphQLサーバで、受け取ったデータを適切にエスケープまたはエンコードせずに、ほかの処理系に渡した場合、インジェクション攻撃が成立し得ます。&lt;/p>
&lt;h2 id="影響">
 影響
 &lt;a class="anchor" href="#%e5%bd%b1%e9%9f%bf">#&lt;/a>
&lt;/h2>
&lt;p>インジェクションを受けた処理系に応じてさまざまな影響を受けます。&lt;/p>
&lt;p>GraphQLで受け取った入力を渡す先の処理系には、たとえば下記のようなものが想定されます。&lt;/p>
&lt;ul>
&lt;li>OS&lt;/li>
&lt;li>DBMS(SQL/NoSQL)&lt;/li>
&lt;li>XMLパーサ&lt;/li>
&lt;/ul>
&lt;p>このような処理系に信頼できない入力を渡した場合、下記のような攻撃が成立し得ます。&lt;/p>
&lt;!-- textlint-disable prh -->
&lt;ul>
&lt;li>OSコマンドインジェクション&lt;/li>
&lt;li>SQL/NoSQLインジェクション&lt;/li>
&lt;li>XXE(&lt;strong>X&lt;/strong>ML E&lt;strong>x&lt;/strong>ternal &lt;strong>E&lt;/strong>ntity)&lt;/li>
&lt;/ul>
&lt;!-- textlint-enable prh -->
&lt;p>他にも、さまざまなインジェクション系の脆弱性につながる可能性があります。例で挙げたような処理系以外でも、GraphQLサーバが受け取った入力を渡す場合は、適切にその入力値を処理する必要があります。&lt;/p>
&lt;h2 id="検証方法">
 検証方法
 &lt;a class="anchor" href="#%e6%a4%9c%e8%a8%bc%e6%96%b9%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;p>実際に、例を見てGraphQLを利用したアプリケーションでSQLインジェクションが成立することを確認しましょう。下記のようなGraphQLのスキーマを想像してください。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-graphql" data-lang="graphql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Article&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	id: &lt;span style="color:#a6e22e">ID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	title: &lt;span style="color:#a6e22e">String&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	content: &lt;span style="color:#a6e22e">String&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Query&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e"># 記事の情報を取得する&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	getArticle(id: &lt;span style="color:#a6e22e">ID&lt;/span>): &lt;span style="color:#a6e22e">Article&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>スキーマで定義されたクエリ&lt;code>getArticle&lt;/code>のリゾルバは下記のように実装されているとします。(サンプルコードは擬似コードです。)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">getArticleResolver&lt;/span>(&lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">query&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;SELECT * FROM users WHERE id = &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>このとき、ユーザーが下記のようなGraphQLクエリを投げた場合のSQLクエリを考えてみてください。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-graphql" data-lang="graphql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">query&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">getArticle&lt;/span>(id: &lt;span style="color:#e6db74">&amp;#34;1 UNION SELECT * FROM users&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">id&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		title
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		content
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>実際に発行されるSQLクエリは、開発者が意図していたものとは異なるものになることがわかります。具体的には、&lt;code>SELECT * FROM users WHERE id = 1 UNION SELECT * FROM users&lt;/code>というSQLクエリが発行されます。&lt;/p></description></item><item><title>診断に役立つツール</title><link>https://wg1.isog-j.org/graphQLGuideline/docs/appendix/tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wg1.isog-j.org/graphQLGuideline/docs/appendix/tools/</guid><description>&lt;h1 id="診断に役立つツール">
 診断に役立つツール
 &lt;a class="anchor" href="#%e8%a8%ba%e6%96%ad%e3%81%ab%e5%bd%b9%e7%ab%8b%e3%81%a4%e3%83%84%e3%83%bc%e3%83%ab">#&lt;/a>
&lt;/h1>
&lt;h2 id="graphql-クライアント">
 GraphQL クライアント
 &lt;a class="anchor" href="#graphql-%e3%82%af%e3%83%a9%e3%82%a4%e3%82%a2%e3%83%b3%e3%83%88">#&lt;/a>
&lt;/h2>
&lt;p>GraphQLに対応したクライアントを利用することで、対象のGraphQL構成の把握や調査に役立ちます。プロキシツールと併用することで手動での検査をする際にも有用です。&lt;/p>
&lt;ul>
&lt;li>Altair
&lt;ul>
&lt;li>&lt;a href="https://altair.sirmuel.design/">https://altair.sirmuel.design/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Insomnia
&lt;ul>
&lt;li>&lt;a href="https://insomnia.rest/products/insomnia">https://insomnia.rest/products/insomnia&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GraphiQL
&lt;ul>
&lt;li>&lt;a href="https://github.com/graphql/graphiql">https://github.com/graphql/graphiql&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>graphql-voyager
&lt;ul>
&lt;li>&lt;a href="https://github.com/APIs-guru/graphql-voyager">https://github.com/APIs-guru/graphql-voyager&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="プロキシツール">
 プロキシツール
 &lt;a class="anchor" href="#%e3%83%97%e3%83%ad%e3%82%ad%e3%82%b7%e3%83%84%e3%83%bc%e3%83%ab">#&lt;/a>
&lt;/h2>
&lt;p>Webアプリケーション一般のデバッグや脆弱性診断によく用いられる、HTTPレベルでの操作をしやすくするためのツールです。&lt;/p>
&lt;!-- textlint-disable prh -->
&lt;ul>
&lt;li>Burp Suite
&lt;ul>
&lt;li>&lt;a href="https://portswigger.net/burp">https://portswigger.net/burp&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Fiddler
&lt;ul>
&lt;li>&lt;a href="https://www.telerik.com/fiddler">https://www.telerik.com/fiddler&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>OWASP ZAP
&lt;ul>
&lt;li>&lt;a href="https://www.zaproxy.org/">https://www.zaproxy.org/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Packet Proxy
&lt;ul>
&lt;li>&lt;a href="https://github.com/DeNA/PacketProxy">https://github.com/DeNA/PacketProxy&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;!-- textlint-enable prh -->
&lt;h2 id="学習サイト環境">
 学習サイト/環境
 &lt;a class="anchor" href="#%e5%ad%a6%e7%bf%92%e3%82%b5%e3%82%a4%e3%83%88%e7%92%b0%e5%a2%83">#&lt;/a>
&lt;/h2>
&lt;p>GraphQLに関係した脆弱性について学べるサイトやツールは、攻撃者視点でWebアプリケーションを見る上で有用です。&lt;/p>
&lt;ul>
&lt;li>Damn-Vulnerable-GraphQL-Application(DVGA)
&lt;ul>
&lt;li>&lt;a href="https://github.com/dolevf/Damn-Vulnerable-GraphQL-Application">https://github.com/dolevf/Damn-Vulnerable-GraphQL-Application&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>hacker101
&lt;ul>
&lt;li>&lt;a href="https://www.hackerone.com/hackers/hacker101">https://www.hackerone.com/hackers/hacker101&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="自動スキャンツール">
 自動スキャンツール
 &lt;a class="anchor" href="#%e8%87%aa%e5%8b%95%e3%82%b9%e3%82%ad%e3%83%a3%e3%83%b3%e3%83%84%e3%83%bc%e3%83%ab">#&lt;/a>
&lt;/h2>
&lt;p>手動で見つけられない脆弱性を機械的に探す場合や、網羅的に探す場合に有用です。&lt;/p>
&lt;ul>
&lt;li>inQL (Burp Suite Extender)&lt;/li>
&lt;/ul>
&lt;p>Webアプリケーションの診断でよく用いられるBurpにおいて、GraphQLの診断をサポートしてくれるExtensionです。&lt;/p>
&lt;p>&lt;a href="https://github.com/doyensec/inql">https://github.com/doyensec/inql&lt;/a>&lt;/p>
&lt;ul>
&lt;li>OWASP ZAP Addon&lt;/li>
&lt;/ul>
&lt;p>オープンソースで提供されているWebアプリケーション診断ツールであるOWASP ZAPにおいて、GraphQLの診断をサポートしてくれるAddonです。&lt;/p>
&lt;p>&lt;a href="https://github.com/zaproxy/zap-extensions/tree/main/addOns/graphql">https://github.com/zaproxy/zap-extensions/tree/main/addOns/graphql&lt;/a>&lt;/p>
&lt;ul>
&lt;li>GraphQLmap&lt;/li>
&lt;/ul>
&lt;p>スキーマのダンプやファジングが可能な、侵入テストの目的でGraphqlエンドポイントと対話するためのスクリプトエンジンです。&lt;/p>
&lt;p>&lt;a href="https://github.com/swisskyrepo/GraphQLmap">https://github.com/swisskyrepo/GraphQLmap&lt;/a>&lt;/p>
&lt;!-- textlint-disable prh -->
&lt;ul>
&lt;li>graphql-path-enum&lt;/li>
&lt;/ul>
&lt;!-- textlint-enable prh -->
&lt;p>スキーマやタイプを特定するためのさまざまな方法をリストするツールです。&lt;/p></description></item><item><title>GraphQLによるDoS攻撃</title><link>https://wg1.isog-j.org/graphQLGuideline/docs/specific/dos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wg1.isog-j.org/graphQLGuideline/docs/specific/dos/</guid><description>&lt;h1 id="graphqlによるdos攻撃">
 GraphQLによるDoS攻撃
 &lt;a class="anchor" href="#graphql%e3%81%ab%e3%82%88%e3%82%8bdos%e6%94%bb%e6%92%83">#&lt;/a>
&lt;/h1>
&lt;h2 id="概要">
 概要
 &lt;a class="anchor" href="#%e6%a6%82%e8%a6%81">#&lt;/a>
&lt;/h2>
&lt;p>GraphQLはデータ構造に対するクエリ言語であるため、複数のフィールドを組み合わせて巨大なノードを要求するクエリを発行できます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-graphql" data-lang="graphql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">query&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">regions&lt;/span> (limit: &lt;span style="color:#a6e22e">1000&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		teams (limit: &lt;span style="color:#a6e22e">1000&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			users (limit: &lt;span style="color:#a6e22e">1000&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>要求クエリの条件を満たすデータが十分に存在している場合、取得ノード数が指数関数的に増加します。&lt;/p>
&lt;p>また、しばしば再帰的にデータ構造が参照可能な状態になることがあります。&lt;/p>
&lt;p>member コンポーネントは、その所属するチーム情報(team)を取得できます。さらに、teamコンポーネントは、そのチームに所属するメンバーリストを持っています。メンバーリストには最初に指定したメンバー情報を参照できるため、コンポーネントの解決にループが生じます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-graphql" data-lang="graphql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">query&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">member&lt;/span> (id: &lt;span style="color:#a6e22e">1&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		name,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		team {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			teamId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			teamName,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			memberList {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">...&lt;/span>member
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-graphql" data-lang="graphql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">query&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">member&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">...&lt;/span>memberFragment
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fragment&lt;/span> &lt;span style="color:#a6e22e">memberFragment&lt;/span> &lt;span style="color:#66d9ef">on&lt;/span> Member {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	teamFragment
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fragment&lt;/span> &lt;span style="color:#a6e22e">teamFragment&lt;/span> &lt;span style="color:#66d9ef">on&lt;/span> Member {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	team {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		teamId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		teamName,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		memberList {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">...&lt;/span>memberFragment
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>実際に報告された事例は少ないですが、再帰的な解決を引き起こすクエリは潜在的に脆弱になりうる要素の1つとして指摘されています。&lt;/p></description></item><item><title>GraphQLの概要</title><link>https://wg1.isog-j.org/graphQLGuideline/docs/about_graphql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wg1.isog-j.org/graphQLGuideline/docs/about_graphql/</guid><description>&lt;h1 id="graphqlの概要">
 GraphQLの概要
 &lt;a class="anchor" href="#graphql%e3%81%ae%e6%a6%82%e8%a6%81">#&lt;/a>
&lt;/h1>
&lt;h1 id="graphqlとは">
 GraphQLとは
 &lt;a class="anchor" href="#graphql%e3%81%a8%e3%81%af">#&lt;/a>
&lt;/h1>
&lt;p>GraphQLとはFacebookによって開発されたWeb APIの規格です。&lt;/p>
&lt;p>RESTful APIにおける課題を解決する技術として注目されており、海外ではGitHub,Twitter等すでに多くのサービスで採用され、近年では国内でも採用するサービスが増えてきました。&lt;/p>
&lt;h1 id="graphqlの例">
 GraphQLの例
 &lt;a class="anchor" href="#graphql%e3%81%ae%e4%be%8b">#&lt;/a>
&lt;/h1>
&lt;p>GraphQLはSQLのようなデータを問い合わせるための言語であり、以下2つの言語が存在します。&lt;/p>
&lt;ul>
&lt;li>クエリ： GraphQL API のリクエストを生成するための言語&lt;/li>
&lt;li>スキーマ： GraphQL API の仕様を記述するための言語&lt;/li>
&lt;/ul>
&lt;p>ここでは、ユーザー情報を通知するようなGraphQLサービスを例としてGraphQLの処理を簡単に説明します。&lt;/p>
&lt;p>このサービスでは、サーバ側で以下のような内容のスキーマが定義されています。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-graphql" data-lang="graphql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Query&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user: &lt;span style="color:#a6e22e">User&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: &lt;span style="color:#a6e22e">ID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &lt;span style="color:#a6e22e">String&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mail: &lt;span style="color:#a6e22e">String&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>このスキーマではuserというクエリで、Userというオブジェクトを取得することを定義しています。スキーマの記述内容を簡単に説明すると以下となります。&lt;/p>
&lt;ul>
&lt;li>type Queryはqueryのためにあらかじめ予約されたルート型名であり、フィールドUserを持っています。&lt;/li>
&lt;li>同様にtype UserはID型であるidフィールド、String型であるnameフィールドとmailフィールドを持っています。&lt;/li>
&lt;/ul>
&lt;p>GraphQLでは、クライアント側は処理させたいクエリ指定してリクエストを送信します。クライアント側から以下のようなユーザーの名前を取得するようなクエリが記述されたリクエストを受信したとします。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-graphql" data-lang="graphql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">query&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">user&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>サーバはリクエストを受け取ると送信されてきたクエリを上記で説明した定義済みのスキーマに照合して検証し、クエリを実行します。その後、クライアントはレスポンスでjson形式のクエリが処理された結果を受け取ります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-graphql" data-lang="graphql">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;data&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;user&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Shindan Taro&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>たとえば名前だけではなくメールアドレスも取得したい場合には以下のようにクエリを変更することで取得できます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-graphql" data-lang="graphql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">query&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">User&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mail
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-graphql" data-lang="graphql">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;data&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;User&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Shindan Taro&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;mail&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;taro@example.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>また、GraphQLスキーマを以下のように設定することで、クエリに引数を持たせることもできます。
以下の例ではuserConditionという名前のUserConditionオブジェクトにて、ユーザーIDの値を引数にとるGraphQLスキーマを定義しています。&lt;/p></description></item><item><title>参考文献</title><link>https://wg1.isog-j.org/graphQLGuideline/docs/appendix/documents/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wg1.isog-j.org/graphQLGuideline/docs/appendix/documents/</guid><description>&lt;h1 id="参考文献">
 参考文献
 &lt;a class="anchor" href="#%e5%8f%82%e8%80%83%e6%96%87%e7%8c%ae">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>GraphQL公式サイト: &lt;a href="https://graphql.org/">https://graphql.org/&lt;/a>&lt;/li>
&lt;li>ベストプラクティス: &lt;a href="https://graphql.org/learn/best-practices/">https://graphql.org/learn/best-practices/&lt;/a>&lt;/li>
&lt;li>GraphQL - OWASP Cheat Sheet Series: &lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html">https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html&lt;/a>&lt;/li>
&lt;li>9 Ways To Secure your GraphQL API — GraphQL Security Checklist: &lt;a href="https://www.apollographql.com/blog/graphql/security/9-ways-to-secure-your-graphql-api-security-checklist/">https://www.apollographql.com/blog/graphql/security/9-ways-to-secure-your-graphql-api-security-checklist/&lt;/a>&lt;/li>
&lt;li>Webアプリケーション診断ガイドライン: &lt;a href="https://github.com/ueno1000/WebAppPentestGuidelines">https://github.com/ueno1000/WebAppPentestGuidelines&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>不適切なアクセス制御</title><link>https://wg1.isog-j.org/graphQLGuideline/docs/common/access_control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wg1.isog-j.org/graphQLGuideline/docs/common/access_control/</guid><description>&lt;h1 id="不適切なアクセス制御">
 不適切なアクセス制御
 &lt;a class="anchor" href="#%e4%b8%8d%e9%81%a9%e5%88%87%e3%81%aa%e3%82%a2%e3%82%af%e3%82%bb%e3%82%b9%e5%88%b6%e5%be%a1">#&lt;/a>
&lt;/h1>
&lt;h2 id="概要">
 概要
 &lt;a class="anchor" href="#%e6%a6%82%e8%a6%81">#&lt;/a>
&lt;/h2>
&lt;p>GraphQL APIにおいても、ほかのシステムと同様に、アクセス制御を適切に実施する必要があります。&lt;/p>
&lt;h2 id="影響">
 影響
 &lt;a class="anchor" href="#%e5%bd%b1%e9%9f%bf">#&lt;/a>
&lt;/h2>
&lt;!-- textlint-disable prh -->
&lt;p>GraphQL APIのアクセス制御が適切に実施されていない場合、APIで操作できるさまざまなリソース(例：ユーザー情報やライセンスキー等)が、不正に作成、取得、更新、削除される可能性があります。&lt;/p>
&lt;!-- textlint-enable prh -->
&lt;p>昨今では、国内のサービスでもGraphQL APIにおけるアクセス制御の不備が発見され報告されています。詳しくは、下記のページをご覧ください。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zenn.dev/mipsparc/articles/a818970a19ade6">GraphQL採用サービスで任意カラムを取得できる脆弱性を見つけた話&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gist.github.com/mala/8f264786026d105c7144dcbed8240bc9">GraphQL採用サービスに追加で脆弱性を報告した話&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="検証方法">
 検証方法
 &lt;a class="anchor" href="#%e6%a4%9c%e8%a8%bc%e6%96%b9%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;p>対象のリソースに対するアクセス権を持たない認証状態で、クエリやミューテーションを通じて、リソースのCRUD操作を試みてください。たとえば、ユーザーIDやライセンスキーのようなアクセス識別子を送っている場合は、値の追加や変更等の検証する方法があります。操作が成功した場合、適切なアクセス制御が実施されていない事がわかります。&lt;/p>
&lt;h2 id="対策">
 対策
 &lt;a class="anchor" href="#%e5%af%be%e7%ad%96">#&lt;/a>
&lt;/h2>
&lt;p>RBAC(&lt;strong>R&lt;/strong>ole &lt;strong>B&lt;/strong>ased &lt;strong>A&lt;/strong>ccess &lt;strong>C&lt;/strong>ontrol)やほかのアクセス制御のしくみを用いて、リソースにCRUDを実行しようとしているユーザーが、適切な権限を有しているかを必ず検証してください。もし、その操作が正規のユーザーによるものであることを確認できない場合、そのリクエストを拒否するようにしてください。&lt;/p></description></item><item><title>レースコンディション</title><link>https://wg1.isog-j.org/graphQLGuideline/docs/specific/race_condition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wg1.isog-j.org/graphQLGuideline/docs/specific/race_condition/</guid><description>&lt;h1 id="レースコンディション">
 レースコンディション
 &lt;a class="anchor" href="#%e3%83%ac%e3%83%bc%e3%82%b9%e3%82%b3%e3%83%b3%e3%83%87%e3%82%a3%e3%82%b7%e3%83%a7%e3%83%b3">#&lt;/a>
&lt;/h1>
&lt;h2 id="概要">
 概要
 &lt;a class="anchor" href="#%e6%a6%82%e8%a6%81">#&lt;/a>
&lt;/h2>
&lt;p>レースコンディションとは、複数のプロセスやスレッドから同一のリソースへ同時にアクセスした際に、予期せぬ処理結果が生じる問題です。&lt;/p>
&lt;center>
&lt;figure>&lt;img src="figure2.png"
 alt="図2" width="60%">&lt;figcaption>
 &lt;p>図2&lt;/p>
 &lt;/figcaption>
&lt;/figure>

&lt;/center>
&lt;p>たとえば、データベースにおいてトランザクションがレコードを読み取り、値を更新する処理を考えます。あるトランザクションの更新処理が終わる前に、別のトランザクションが同じレコードを読み取り、値を更新した場合、最終的なレコードの値が想定とは異なる状態に更新されてしまう可能性があります。&lt;/p>
&lt;p>GraphQLにおいても、対策をしていない場合、QueryやMutationのリクエストを同時に送信された場合等に、レースコンディションの問題につながる危険性があります。&lt;/p>
&lt;p>GraphQLにおいては、仕様上1つのリクエスト中で複数のMutationを発行した場合は順序が保証されています。しかし、複数のリクエストを同時に送信した場合の順序は保証されていないため、サーバ側の実装次第ではレースコンディションの影響を受ける危険性があります。&lt;/p>
&lt;h2 id="影響">
 影響
 &lt;a class="anchor" href="#%e5%bd%b1%e9%9f%bf">#&lt;/a>
&lt;/h2>
&lt;p>通常のレースコンディションと同様に、予期せぬ処理結果が生じます。たとえば下記のようなものが想定されます。&lt;/p>
&lt;ul>
&lt;li>データの不整合が発生する&lt;/li>
&lt;li>アクセス制限が回避される&lt;/li>
&lt;/ul>
&lt;p>実際に、以下のような事例が報告されています。&lt;/p>
&lt;p>&lt;a href="https://hackerone.com/reports/488985">https://hackerone.com/reports/488985&lt;/a>&lt;/p>
&lt;p>テスト用アカウントのクレデンシャルを取得するmutaitionリクエストを複数送信することにより、本来取得できないはずのアカウントのクレデンシャルを取得可能であった。&lt;/p>
&lt;h2 id="検証方法">
 検証方法
 &lt;a class="anchor" href="#%e6%a4%9c%e8%a8%bc%e6%96%b9%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;p>設計上、競合状態が発生した際の影響が考えられる箇所において、QueryやMutationリクエストをミリ秒単位で同時に複数送信した場合に、処理結果に不整合が発生しないか確認をします。具体的な方法としては、BurpSuiteのIntruderのようなローカルプロキシツールの機能の利用が挙げられます。&lt;/p>
&lt;p>また、ホワイトボックステストも有効です。データベースやファイル等の共有資源へアクセスする処理では問題が起きやすいため、排他制御が適切に行われているか重点的に確認しましょう。&lt;/p>
&lt;h2 id="対策">
 対策
 &lt;a class="anchor" href="#%e5%af%be%e7%ad%96">#&lt;/a>
&lt;/h2>
&lt;p>複数のプロセスやスレッドから同一リソースへアクセスが必要な場合、リソースのチェックから更新までの一連の処理が完了するまで、ほかのプロセスからアクセスできないように排他制御を実装することが推奨されます。&lt;/p>
&lt;p>しかしながら、排他制御の実装によっては、サイトのパフォーマンスにも影響を及ぼす可能性があるため、レースコンディション対策ではより一層注意してください。&lt;/p></description></item><item><title>危険なデフォルト設定の使用</title><link>https://wg1.isog-j.org/graphQLGuideline/docs/common/default_setting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wg1.isog-j.org/graphQLGuideline/docs/common/default_setting/</guid><description>&lt;h1 id="危険なデフォルト設定の使用">
 危険なデフォルト設定の使用
 &lt;a class="anchor" href="#%e5%8d%b1%e9%99%ba%e3%81%aa%e3%83%87%e3%83%95%e3%82%a9%e3%83%ab%e3%83%88%e8%a8%ad%e5%ae%9a%e3%81%ae%e4%bd%bf%e7%94%a8">#&lt;/a>
&lt;/h1>
&lt;h2 id="概要">
 概要
 &lt;a class="anchor" href="#%e6%a6%82%e8%a6%81">#&lt;/a>
&lt;/h2>
&lt;p>GraphQLライブラリには、デフォルトで開発者向け機能が有効になっている場合があります。&lt;br>
前述のIntrospection機能が代表例ですが、ほかにもエラーメッセージ中に不必要な情報が出力されることもあります。&lt;br>
具体的には、Introspection機能がOffであってもSchemaを推測されたり、特定のURLで情報を受け取るがためにEndPointを推測されやすいといった問題が挙げられます。&lt;/p>
&lt;h2 id="影響">
 影響
 &lt;a class="anchor" href="#%e5%bd%b1%e9%9f%bf">#&lt;/a>
&lt;/h2>
&lt;p>攻撃者にとって有用なシステムに関する情報を取得される恐れがあります。&lt;br>
ただちに攻撃にはつながらないものの、ほかの攻撃の起点となる恐れがあります。&lt;/p>
&lt;h2 id="検証方法">
 検証方法
 &lt;a class="anchor" href="#%e6%a4%9c%e8%a8%bc%e6%96%b9%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;p>以下のように存在しないクエリを送信した際に、レスポンスエラー中に存在するクエリの情報が出力された場合は、対策が必要です。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-graphql" data-lang="graphql">&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#e6db74">&amp;#34;query&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;query\n{\nsysytem\n}&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;errors&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;message&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Cannot query field \&amp;#34;system\&amp;#34; on type \&amp;#34;Query\&amp;#34;. Did you mean \&amp;#34;pastes\&amp;#34;, \&amp;#34;paste\&amp;#34;, \&amp;#34;systemUpdate\&amp;#34; or \&amp;#34;systemHealth\&amp;#34;?&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;locations&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;line&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;column&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>エラーメッセージの出力に起因する問題は、GraphQLのエラーだけではなく、データベースで生じたエラーの情報等も含まれます。
そのため、バックエンドのシステム全体についてエラーメッセージから有用な情報が得られないか検証する必要があります。このような検証には、ファジングやツールによるスキャンが有用です。&lt;/p>
&lt;p>また、直接コードを閲覧できる場合は、GraphQLライブラリの設定や受け渡している引数が公式ドキュメントやWebページ等で推奨されている方式であるか確認することも有力な検証方法の1つです。&lt;/p>
&lt;h2 id="対策">
 対策
 &lt;a class="anchor" href="#%e5%af%be%e7%ad%96">#&lt;/a>
&lt;/h2>
&lt;p>本番環境ではデバッグモードを有効にしないでください。&lt;br>
また、エラーメッセージは極力画面上には出力せず、ファイルやデータベース等に書き出してください。&lt;/p>
&lt;p>EndPoint URLはユーザーにアクセスされるため、一般的にはユーザーに向けて開示されている情報です。しかしながら、ユーザーに広く開示していない場合は単純な機械的アクセスによってEndPointを探索されることを避けるため、変更することを推奨します。&lt;/p>
&lt;p>これらの設定が適切に行えないライブラリを利用する場合は、直接ユーザーがGraphQLサーバに対してアクセスできないように制限してください。対策の例として、ユーザーからの入力情報に応じてGraphQL EndPointに中継するサーバサイドのプログラムで、ユーザーのアクセス制御を行うことが挙げられます。&lt;br>
なお、必要な設定はライブラリによって異なるため、使用しているライブラリのドキュメントに従って本番環境向けの設定にする必要があります。&lt;/p></description></item><item><title>クロスサイトリクエストフォージェリ</title><link>https://wg1.isog-j.org/graphQLGuideline/docs/common/cross_site_request_forgeries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wg1.isog-j.org/graphQLGuideline/docs/common/cross_site_request_forgeries/</guid><description>&lt;h1 id="クロスサイトリクエストフォージェリ">
 クロスサイトリクエストフォージェリ
 &lt;a class="anchor" href="#%e3%82%af%e3%83%ad%e3%82%b9%e3%82%b5%e3%82%a4%e3%83%88%e3%83%aa%e3%82%af%e3%82%a8%e3%82%b9%e3%83%88%e3%83%95%e3%82%a9%e3%83%bc%e3%82%b8%e3%82%a7%e3%83%aa">#&lt;/a>
&lt;/h1>
&lt;h2 id="概要">
 概要
 &lt;a class="anchor" href="#%e6%a6%82%e8%a6%81">#&lt;/a>
&lt;/h2>
&lt;p>GraphQLサーバの実装不備によってクライアントから送信されるリクエストが十分検証できていない場合、クロスサイトリクエストフォージェリ(CSRF)攻撃に対して脆弱になる可能性があります。&lt;/p>
&lt;h2 id="影響">
 影響
 &lt;a class="anchor" href="#%e5%bd%b1%e9%9f%bf">#&lt;/a>
&lt;/h2>
&lt;p>CSRFが悪用された場合と同様の影響を受けます。GraphQL スキーマで定義されているMutationのような副作用のある処理では、攻撃者によって設置された罠ページを経由することにより被害者の意図しない処理を実行させられます。お問い合わせ機能や、チャットへの投稿、商品購入のような金銭授受に関わる処理など、影響については悪用される機能によって異なります。&lt;/p>
&lt;h2 id="検証方法">
 検証方法
 &lt;a class="anchor" href="#%e6%a4%9c%e8%a8%bc%e6%96%b9%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;p>CSRFの検証方法は一般のWebアプリケーションのテスト方法と同様です。
検査対象のアプリケーションとは異なるオリジンの罠ページを用意し、被害者ユーザーの意図にかかわらずリクエストを送信できるかを検証します。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery">Testing for Cross Site Request Forgery&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.doyensec.com/2021/05/20/graphql-csrf.html">That single GraphQL issue that you keep missing&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>通常、GraphQLのクエリを送信するリクエストのContent-Typeは「application/json」で定義されます。
サーバの実装不備などによってContent-Typeが正しく検証されず、「application/json」以外も受け入れてしまう挙動の場合、CSRFに対して脆弱になる可能性があります。
一例として、以下のような罠を含んだページを閲覧することでリクエストが送信され、サーバ側で受け入れられるかを検証します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">body&lt;/span> &lt;span style="color:#a6e22e">onload&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;document.forms[0].submit()&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">form&lt;/span> &lt;span style="color:#a6e22e">action&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://[TARGET_DOMAIN]/graphql&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">method&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;POST&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">enctype&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text/plain&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">textarea&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;amp;#x71;&amp;amp;#x75;&amp;amp;#x65;&amp;amp;#x72;&amp;amp;#x79;&amp;amp;#x7b;&amp;amp;#x41;&amp;amp;#x6c;&amp;amp;#x6c;&amp;amp;#x42;&amp;amp;#x6f;&amp;amp;#x6f;&amp;amp;#x6b;&amp;amp;#x73;&amp;amp;#x7b;&amp;amp;#x42;&amp;amp;#x6f;&amp;amp;#x6f;&amp;amp;#x6b;&amp;amp;#x73;&amp;amp;#x20;&amp;amp;#x7b;&amp;amp;#x69;&amp;amp;#x64;&amp;amp;#x2c;&amp;amp;#x74;&amp;amp;#x69;&amp;amp;#x74;&amp;amp;#x6c;&amp;amp;#x65;&amp;amp;#x2c;&amp;amp;#x61;&amp;amp;#x75;&amp;amp;#x74;&amp;amp;#x68;&amp;amp;#x6f;&amp;amp;#x72;&amp;amp;#x2c;&amp;amp;#x23;&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hidden&amp;#34;&lt;/span>&amp;gt;x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}}}&amp;lt;/&lt;span style="color:#f92672">textarea&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">form&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この罠サイトは以下のようなリクエストを送信します。&lt;/p>
&lt;pre tabindex="0">&lt;code>POST /graphql HTTP/1.1
Host: [TARGET_DOMAIN]
Content-Length: 48
Origin: http://[ATTACKER_DOMAIN]
Content-Type: text/plain
User-Agent: [UA]
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Referer: http://[ATTACKER_DOMAIN]
Accept-Encoding: gzip, deflate
Accept-Language: ja,en-US;q=0.9,en;q=0.8
Connection: close

query{AllBooks{Books {id,title,author,#=x
}}}
&lt;/code>&lt;/pre>&lt;h2 id="対策">
 対策
 &lt;a class="anchor" href="#%e5%af%be%e7%ad%96">#&lt;/a>
&lt;/h2>
&lt;p>対策についても一般のWebアプリケーションの対策方法と同様です。
CSRFトークンやCookieの二重送信などが基本的な対策方法として挙げられますが、先も述べたように、通常GraphQLリクエストのContent-Typeは「application/json」で定義されます。
そのため、GraphQLのようなアプリケーションはAJAXを用いたクライアントアプリケーションとの結び付きが強く、カスタムリクエストヘッダを用いた対策がしばしば提案されます。
カスタムヘッダを設定したリクエストは同一生成元ポリシーによる制限を受けるため、CSRFの対策に有効です。&lt;/p></description></item></channel></rss>